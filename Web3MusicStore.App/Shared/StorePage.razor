@using Web3MusicStore.App.Models
@using MetaMask.Blazor;
@using MetaMask.Blazor.Enums;
@using MetaMask.Blazor.Exceptions;
@using Web3MusicStore.App.Models;
@using Microsoft.AspNetCore.Components;
@using Nethereum.ABI.FunctionEncoding;
@using Nethereum.ABI.Model;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Numerics;
@using System.Threading.Tasks;
@using System.Net.Http;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using System.Net.Http.Json;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Threading;
@using System.Diagnostics;
@using Microsoft.JSInterop;

<div class="rounded-box grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 m-3 mt-0 
    max-w-screen-xl gap-4 bg-base-200 p-10 w-auto h-auto">
    @foreach (var item in PageState.albums)
    {
        <div class="card card-compact max-w-96 bg-primary-content shadow-xl">
            <figure>
                <img src=@item.image_url alt="AlbumCover"/>
            </figure>
            <div class="card-body">
                <h2 class="card-title">@item.name</h2>
                @foreach (var artist in item.artists_view)
                {
                    <p>@artist.Value</p>
                }
                <div class="card-actions justify-end">
                    <button class="btn btn-primary" @onclick="() => AlbumClicked(item.album_id)">Buy Now</button>
                </div>
            </div>
        </div>
    }
</div>

@if (ShowMyFoo)
{
    <BuyConfirmation></BuyConfirmation>
}

@code {

    [Inject]
    StateContainer PageState { get; set; } = default!;

    [Inject]
    public IHttpClientFactory ClientFactory { get; set; } = default!;
    
    protected override async Task OnInitializedAsync()
    {
        PageState.OnAlbumChange += StateHasChanged;
    }

    private async Task AlbumClicked(string? albumID)
    {
        PageState.SetSongs(new List<Song>());

        PageState.SetAlbumSelected(PageState.albums.Select(x => x).Where(x => x.album_id.Equals(albumID)));
        PageState.SetPageState(1);
        CancellationTokenSource tokenSource = new CancellationTokenSource();
        tokenSource.Token.ThrowIfCancellationRequested();
        tokenSource.CancelAfter(10000);

        string url = $"https://localhost:7050/Store/{albumID}/TrackList";
        var request = new HttpRequestMessage(HttpMethod.Get, url);
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request, tokenSource.Token).ConfigureAwait(false);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            var songsResponse = await JsonSerializer.DeserializeAsync<IEnumerable<Song>>(responseStream, new
                JsonSerializerOptions()
            {
                PropertyNameCaseInsensitive = true
            });

            var songList = songsResponse?.ToList();
            if (songList != null && songList.Count != 0)
            {
                PageState.SetSongs(songList);
                foreach (var song in songList)
                {
                    Console.WriteLine(song.song_name);
                }
            }
        }
    }

    private bool ShowMyFoo { get; set; } = false;

    private void Show()
    {
        ShowMyFoo = !ShowMyFoo;
        StateHasChanged();
    }

    public void Dispose()
    {
        PageState.OnAlbumChange -= StateHasChanged;
    }
}