<div class="flex flex-col w-full items-center rounded-box gap-3 justify-center content-center 
  bg-base-200 bg-opacity-40 max-w-screen-xl">

  <ContainerNavBar></ContainerNavBar>

  @if (PageState.PageState == 0)
  {
    <StorePage></StorePage>
  }
  else if (PageState.PageState == 1)
  {
    <AlbumPage></AlbumPage>
  }
  else if (PageState.PageState == 2)
  {
    <UploadPage></UploadPage>
  }
</div>

@code {
  [Inject] 
  public PageStateContainer PageState { get; set; } = default!;
  [Inject]
  public IHttpClientFactory ClientFactory { get; set; } = default!;

  protected override async Task OnInitializedAsync()
  {
    PageState.OnPageChange += StateHasChanged;
    await Task.Delay(0);
    CancellationTokenSource tokenSource = new CancellationTokenSource();
    tokenSource.Token.ThrowIfCancellationRequested();
    tokenSource.CancelAfter(10000);
      
    var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7050/Store");
    var client = ClientFactory.CreateClient();
    var response = await client.SendAsync(request, tokenSource.Token).ConfigureAwait(false);
      
    if (response.IsSuccessStatusCode)
    {
      using var responseStream = await response.Content.ReadAsStreamAsync();
      var albumList = await JsonSerializer.DeserializeAsync<IEnumerable<Album>>(responseStream, new JsonSerializerOptions()
      {
        PropertyNameCaseInsensitive = true
      });
      
      Console.WriteLine(albumList?.First().artists_view.First());
      
      if (albumList != null && albumList?.Count() != 0)
      {
        PageState.SetAlbums(albumList!.ToList());
      }
    }
  }

  public void Dispose()
  {
    PageState.OnPageChange -= StateHasChanged;
  }
}